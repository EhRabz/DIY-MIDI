#include <Bounce.h>

const int channel = 1;
// define how many pots are active up to number of available analog inputs ( Total # of Encoders / Faders )
#define analogInputs 5
// make arrays for input values and lagged input values
int inputAnalog[analogInputs];
int iAlag[analogInputs];
// make array of cc values
int ccValue[analogInputs];
// index variable for loop
int i;

// cc values for buttons
int cc_off = 0;
int cc_on = 127;
int cc_super = 127; // Velocity

// map buttons to cc Values for buttons
int cc0 = 51;
int cc1 = 52;
int cc2 = 53;
int cc3 = 54;
int cc4 = 55;
int cc5 = 56;
int cc6 = 57;
int cc7 = 58;
int cc8 = 59;
int cc9 = 60;
int cc10 = 61;
int cc11 = 62;
int cc12 = 63;
int cc13 = 64;
int cc14 = 65;
int cc15 = 66;

//Follow format to add / remove buttons the (0,15 / 1,15 etc, changes to 0,#of your buttons) [example 0,8 1,8 1,8]
Bounce button0 = Bounce(0, 5);
Bounce button1 = Bounce(1, 5);
Bounce button2 = Bounce(2, 5);
Bounce button3 = Bounce(3, 5);
Bounce button4 = Bounce(4, 5);
Bounce button5 = Bounce(5, 5);
Bounce button6 = Bounce(6, 5);
Bounce button7 = Bounce(7, 5);
Bounce button8 = Bounce(8, 5);
Bounce button9 = Bounce(9, 5);
Bounce button10 = Bounce(10, 5);
Bounce button11 = Bounce(11, 5);
Bounce button12 = Bounce(12, 5);
Bounce button13 = Bounce(19, 5);
Bounce button14 = Bounce(20, 5);
Bounce button15 = Bounce(21, 5);





void setup() {
  //start reading pins, disable any pins you're not using to remove any "ghost" values
  // MIDI rate
  Serial.begin(31250);
  pinMode(0, INPUT_PULLUP);
  pinMode(1, INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  pinMode(6, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);
  pinMode(8, INPUT_PULLUP);
  pinMode(9, INPUT_PULLUP);
  pinMode(10, INPUT_PULLUP);
  pinMode(11, INPUT_PULLUP);
  pinMode(12, INPUT_PULLUP);
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
  pinMode(15, INPUT_PULLUP);
  pinMode(16, INPUT_PULLUP);
  pinMode(17, INPUT_PULLUP);
  pinMode(18, INPUT_PULLUP);
  pinMode(19, INPUT_PULLUP);
  pinMode(20, INPUT_PULLUP);
  pinMode(21, INPUT_PULLUP);
  

}

void loop() {
  // loop trough active inputs for knobs
  for (i=0;i<analogInputs;i++){
    // read current value at i-th input
    inputAnalog[i] = analogRead(i);
    // if magnitude of difference is 8 or more...
    if (abs(inputAnalog[i] - iAlag[i]) > 8){
      // calc the CC value based on the raw value
      ccValue[i] = inputAnalog[i]/8;
      // send the MIDI
      usbMIDI.sendControlChange(i, ccValue[i], 3);
      // set raw reading to jagged array for next comparison
      iAlag[i] = inputAnalog[i];
    }
  delay(5); // limits MIDI messages to reasonable number
  }
  
  // Push Button code, +/- to match amount of buttons you're using , keeping in mind button numbers start at 0 ( 1-15 for 16 buttons in this case)
  button0.update();
  button1.update();
  button2.update();
  button3.update();
  button4.update();
  button5.update();
  button6.update();
  button7.update();
  button8.update();
  button9.update();
  button10.update();
  button11.update();
  button12.update();
  button13.update();
  button14.update();
  button15.update();

 //FallingEdge (Button is pressed)
 //First part of ()'s is CC note variable (51-66 in this case) , the CC I/O represents if the note is turned off or on (on for faling edge, off for rising ), Lastly is MIDI channel ( 3 in this case)
   if (button0.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc0, cc_on, channel);
  }
  if (button1.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc1, cc_on, channel);
  }
  if (button2.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc2, cc_on, channel);
  }
  if (button3.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc3, cc_on, channel);
  }
  if (button4.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc4, cc_on, channel);
  }

  if (button5.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc5, cc_on, channel);
  }

  if (button6.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc6, cc_on, channel);
  }

  if (button7.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc7, cc_on, channel);
  }

  if (button8.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc8, cc_on, channel);
  }

  if (button9.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc9, cc_on, channel);
  }

  if (button10.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc10, cc_on, channel);
  }

  if (button11.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc11, cc_on, channel);
  }

  if (button12.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc12, cc_on, channel);
  }

  if (button13.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc13, cc_on, channel);
  }

  if (button14.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc14, cc_on, channel);
  }

  if (button15.fallingEdge())
  {
    usbMIDI.sendNoteOn(cc15, cc_on, channel);
  }

//RisingEdge ( button Release )
   
  
   if (button0.risingEdge())
  {
    usbMIDI.sendNoteOff(cc0, cc_off, channel);
  }
  if (button1.risingEdge())
  {
    usbMIDI.sendNoteOff(cc1, cc_off, channel);
  }
  if (button2.risingEdge())
  {
    usbMIDI.sendNoteOff(cc2, cc_off, channel);
  }
  if (button3.risingEdge())
  {
    usbMIDI.sendNoteOff(cc3, cc_off, channel);
  }
  if (button4.risingEdge())
  {
    usbMIDI.sendNoteOff(cc4, cc_off, channel);
  }
  if (button5.risingEdge())
  {
    usbMIDI.sendNoteOff(cc5, cc_off, channel);
  }
  if (button6.risingEdge())
  {
    usbMIDI.sendNoteOff(cc6, cc_off, channel);
  }
  if (button7.risingEdge())
  {
    usbMIDI.sendNoteOff(cc7, cc_off, channel);
  }
    if (button8.risingEdge())
  {
    usbMIDI.sendNoteOff(cc8, cc_off, channel);
  }
  if (button9.risingEdge())
  {
    usbMIDI.sendNoteOff(cc9, cc_off, channel);
  }
  if (button10.risingEdge())
  {
    usbMIDI.sendNoteOff(cc10, cc_off, channel);
  }
  if (button11.risingEdge())
  {
    usbMIDI.sendNoteOff(cc11, cc_off, channel);
  }
  if (button12.risingEdge())
  {
    usbMIDI.sendNoteOff(cc12, cc_off, channel);
  }
  if (button13.risingEdge())
  {
    usbMIDI.sendNoteOff(cc13, cc_off, channel);
  }
  if (button14.risingEdge())
  {
    usbMIDI.sendNoteOff(cc14, cc_off, channel);
  }
  if (button15.risingEdge())
  {
    usbMIDI.sendNoteOff(cc15, cc_off, channel);
  }
  }
