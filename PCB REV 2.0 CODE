#include <Bounce.h>

// the MIDI channel number to send messages

const int channel = 3; // MIDI Channel to use   
const int LED = 20; // OUTPUT pin which LED is connected to 


// Create Bounce objects for each button.  The Bounce object
// automatically deals with contact chatter or "bounce", and
// it makes detecting changes very simple.
Bounce button0 = Bounce(3, 50);
Bounce button1 = Bounce(4, 50);  // 5 = 5 ms debounce time
Bounce button2 = Bounce(6, 50);  // which is appropriate for good
Bounce button3 = Bounce(7, 50);  // quality mechanical pushbuttons

Bounce button4 = Bounce(2, 50);
Bounce button5 = Bounce(1, 50);  // if a button is too "sensitive"
Bounce button6 = Bounce(9, 50);  // to rapid touch, you can
Bounce button7 = Bounce(8, 50);  // increase this time.


Bounce button8 = Bounce(23, 50);
Bounce button9 = Bounce(15, 50);
Bounce button10 = Bounce(16, 50);
Bounce button11 = Bounce(17, 50);

Bounce button12 = Bounce(22, 50);  
Bounce button13 = Bounce(21, 50);  
Bounce button14 = Bounce(19, 50); 
Bounce button15 = Bounce(18, 50);

void setup() {
  // Configure the pins for input mode with pullup resistors.
  // The pushbuttons connect from each pin to ground.  When
  // the button is pressed, the pin reads LOW because the button
  // shorts it to ground.  When released, the pin reads HIGH
  // because the pullup resistor connects to +5 volts inside
  // the chip.  LOW for "on", and HIGH for "off" may seem
  // backwards, but using the on-chip pullup resistors is very
  // convenient.  The scheme is called "active low", and it's
  // very commonly used in electronics... so much that the chip
  // has built-in pullup resistors!
  pinMode(0, INPUT_PULLUP);
  pinMode(1, INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  pinMode(6, INPUT_PULLUP);  // Teensy++ 2.0 LED, may need 1k resistor pullup
  pinMode(7, INPUT_PULLUP);
  pinMode(8, INPUT_PULLUP);
  pinMode(9, INPUT_PULLUP);
  pinMode(10, INPUT_PULLUP);
  pinMode(11, INPUT_PULLUP); // Teensy 2.0 LED, may need 1k resistor pullup
  pinMode(12, INPUT_PULLUP);
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
  pinMode(15, INPUT_PULLUP);
  pinMode(16, INPUT_PULLUP);
  pinMode(17, INPUT_PULLUP);  
  pinMode(18, INPUT_PULLUP);
  pinMode(19, INPUT_PULLUP);
  pinMode(21, INPUT_PULLUP);  
  pinMode(20, OUTPUT);
  pinMode(22, INPUT_PULLUP);
  pinMode(23, INPUT_PULLUP);
 
}

void loop() {
  // Update all the buttons.  There should not be any long
  // delays in loop(), so this runs repetitively at a rate
  // faster than the buttons could be pressed and released.
  
  button0.update();
  button1.update();
  button2.update();
  button3.update();
  button4.update();
  button5.update();
  button6.update();
  button7.update();
  button8.update();
  button9.update();
  button10.update();
  button11.update();
  button12.update();
  button13.update();
  button14.update();
  button15.update();

  // Check each button for "falling" edge.
  // Send a MIDI Note On message when each button presses
  // Update the Joystick buttons only upon changes.
  // falling = high (not pressed - voltage from pullup resistor)
  //           to low (pressed - button connects pin to ground)
    usbMIDI.read(channel);
    if (button0.fallingEdge()) {
    usbMIDI.sendNoteOn(36, 99, channel);  // 60 = C4
    digitalWrite (LED , HIGH);
  }
  if (button1.fallingEdge()) {
    usbMIDI.sendNoteOn(37, 99, channel);  // 61 = C#4
    digitalWrite (LED , HIGH);
  }
  if (button2.fallingEdge()) {
    usbMIDI.sendNoteOn(38, 99, channel);  // 62 = D4
    digitalWrite (LED , HIGH);
  }
  if (button3.fallingEdge()) {
    usbMIDI.sendNoteOn(39, 99, channel);  // 63 = D#4
    digitalWrite (LED , HIGH);
  }
  if (button4.fallingEdge()) {
    usbMIDI.sendNoteOn(40, 99, channel);  // 64 = E4
    digitalWrite (LED , HIGH);
  }
  if (button5.fallingEdge()) {
    usbMIDI.sendNoteOn(41, 99, channel);  // 65 = F4
    digitalWrite (LED , HIGH);
  }
  if (button6.fallingEdge()) {
    usbMIDI.sendNoteOn(42, 99, channel);  // 66 = F#4
    digitalWrite (LED , HIGH);
  }
  if (button7.fallingEdge()) {
    usbMIDI.sendNoteOn(43, 99, channel);  // 67 = G4
    digitalWrite (LED , HIGH);
  }
  if (button8.fallingEdge()) {
    usbMIDI.sendNoteOn(44, 99, channel);  // 68 = G#4
    digitalWrite (LED , HIGH);
  }
  if (button9.fallingEdge()) {
    usbMIDI.sendNoteOn(45, 99, channel);  // 69 = A5
    digitalWrite (LED , HIGH);
  }
  if (button10.fallingEdge()) {
    usbMIDI.sendNoteOn(46, 99, channel);  // 70 = A#5
    digitalWrite (LED , HIGH);
  }
  if (button11.fallingEdge()) {
    usbMIDI.sendNoteOn(47, 99, channel);  // 71 = B5
    digitalWrite (LED , HIGH);
  }
  if (button12.fallingEdge()) {
    usbMIDI.sendNoteOn(48, 99, channel);  // 71 = B5
    digitalWrite (LED , HIGH);
  }
  if (button13.fallingEdge()) {
    usbMIDI.sendNoteOn(49, 99, channel);  // 71 = B5
    digitalWrite (LED , HIGH);
  }
  if (button14.fallingEdge()) {
    usbMIDI.sendNoteOn(50, 99, channel);  // 71 = B5
    digitalWrite (LED , HIGH);
  }
  if (button15.fallingEdge()) {
    usbMIDI.sendNoteOn(51, 99, channel);  // 71 = B5
    digitalWrite (LED , HIGH);
  }
  

  


  // Check each button for "rising" edge
  // Send a MIDI Note Off message when each button releases
  // For many types of projects, you only care when the button
  // is pressed and the release isn't needed.
  // rising = low (pressed - button connects pin to ground)
  //          to high (not pressed - voltage from pullup resistor)
  if (button0.risingEdge()) {
    usbMIDI.sendNoteOff(36, 0, channel);  // 60 = C4
    digitalWrite (LED , LOW);
  }
  if (button1.risingEdge()) {
    usbMIDI.sendNoteOff(37, 0, channel);  // 61 = C#4
    digitalWrite (LED , LOW);
  }
  if (button2.risingEdge()) {
    usbMIDI.sendNoteOff(38, 0, channel);  // 62 = D4
    digitalWrite (LED , LOW);
  }
  if (button3.risingEdge()) {
    usbMIDI.sendNoteOff(39, 0, channel);  // 63 = D#4
    digitalWrite (LED , LOW);
  }
  if (button4.risingEdge()) {
    usbMIDI.sendNoteOff(40, 0, channel);  // 64 = E4
    digitalWrite (LED , LOW);
  }
  if (button5.risingEdge()) {
    usbMIDI.sendNoteOff(41, 0, channel);  // 65 = F4
    digitalWrite (LED , LOW);
  }
  if (button6.risingEdge()) {
    usbMIDI.sendNoteOff(42, 0, channel);  // 66 = F#4
    digitalWrite (LED , LOW);
  }
  if (button7.risingEdge()) {
    usbMIDI.sendNoteOff(43, 0, channel);  // 67 = G4
    digitalWrite (LED , LOW);
  }
  if (button8.risingEdge()) {
    usbMIDI.sendNoteOff(44, 0, channel);  // 68 = G#4
    digitalWrite (LED , LOW);
  }
  if (button9.risingEdge()) {
    usbMIDI.sendNoteOff(45, 0, channel);  // 69 = A5
    digitalWrite (LED , LOW);
  }
  if (button10.risingEdge()) {
    usbMIDI.sendNoteOff(46, 0, channel);  // 70 = A#5
    digitalWrite (LED , LOW);
  }
  if (button11.risingEdge()) {
    usbMIDI.sendNoteOff(47, 0, channel);  // 71 = B5
    digitalWrite (LED , LOW);
  }
  if (button12.risingEdge()) {
    usbMIDI.sendNoteOff(48, 0, channel);  // 71 = B5
    digitalWrite (LED , LOW);
  }
  if (button13.risingEdge()) {
    usbMIDI.sendNoteOff(49, 0, channel);  // 71 = B5
    digitalWrite (LED , LOW);
  }
  if (button14.risingEdge()) {
    usbMIDI.sendNoteOff(50, 0, channel);  // 71 = B5
    digitalWrite (LED , LOW);
  }
  if (button15.risingEdge()) {
    usbMIDI.sendNoteOff(51, 0, channel);  // 71 = B5
    digitalWrite (LED , LOW);
  }

  // MIDI Controllers should discard incoming MIDI messages.
  // http://forum.pjrc.com/threads/24179-Teensy-3-Ableton-Analog-CC-causes-midi-crash
  while (usbMIDI.read()) {
    // ignore incoming messages
  }
}
